<File version="2">
  <FileID>4f232196-c1b4-44a4-b9ee-c31fbb46edee</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAC5hSURBVHhe7d1XcB1Xnt9xvXhrbb/5Yct+cPnF
3jfX+sGuctlbteXarbXXu7OeGU3U7Era0YxypEhlMWcxiaQYRDCLmSAJgAmRRM4550ACRM4ZBH8+
p0loKKo1IrXEwRnd76fqJ1xcdN8gsu//1337gk8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAf0g2//Ef/1HKD3/4w5S1a9enrFq1NmUlIYQQQv5gsmr1upSl
S5el/Ol/+o8pZq7bfLs/+qN/kffmosW6nluhitZ+VZpUtPQRQgghEZGqtn5V3xj8TrHr2tuws7Oq
bcDEXme/PmzuLj/3WKpvDHztPh4mNTeHVN7cozMXLum//Nmf6d6I//1+8Hc/SLmWU6acum4lld5U
UslNJZd1KKm4zVy+F3M5ubRdKUWNSimsN2kghBBC/sBTr+vFjbqcUaGzCQWKTix8pNh1LmdWKrWk
SYl5NYq9XqjYayb260Mmxix/Kb1U14ruPp7zKcXf4bEU6FxSoZLN+mUt/dr+2d6HKwDr1m1Mqb41
pdSUBBVs/pEKtvxY+Zv/nwp3PqXC7T8z+bmKtj+lvJ3PKLWgRqmlLUo1/8MIidw0KavypjJKm4MX
j7TSVmVVtCnTXJdV/ojbh3nhyK7uUGbZ3duy12VU3FR2ZduX3xNC5ifpZru7agb4ydhMXbxWrLiU
okeKXedkXKaumNuITclVUlaZkrLvJtHkWl6V0gprlVpoZqeJvWyvm1vGJjmnXJeu55vHUaZzZpif
j881t3vffVwv0VVTUK6klZnr711OL//K44gzjyPGlIBTl3OUV9ellIz8hysA9n3/2u7byrhyRsPZ
URrMitKNo89pqr1Ek615QaZvFqnp6Iu6npGjdPPilG5e+AiJyJS1mGHdpPNJGUooNEXADP70oiqd
v5an6LgknU4qMeWgTRlmOZuvrv/V7+3PM0sbFH3pmuILm4PykFl5Q4kZBTqbWKxMe9tfu50Hvv+m
n/++ZYKf37tMSAQn22xvsWaoxiQXKrvqhtJMIX+U2HVizJ73ebP+1fQiFdZ3mevalWOSV3NLSbk1
OnkxQ6cvZwU5YS4n5lQHP8sxxT+nul25NZ3KLGnUpbQis0ye0orqv7x9+xiT82t1LOa6zlzJVkp+
nY6cS9a5hFylmR2RtJLmYDm7I2F3Ik7EZSnfFID4lMyHKwCrV69LaeidVU5ynKY6KjTV3aiy9/5U
jXt/qtmJIU31tqh+2w9Uuua/K7u4RjnmweZU3SQkQtOu8pZOLVv0ot7bk6K63imdjtqkp9/eqtjE
TJ1MLFFhc59KGntV3NQbvCAUN/Yo16xb3DygoroO09C7VVhnXgDMtlRSWam//W//Xk9viFfVzUFz
27e0+Nn/o7987XNV3hxWUUOPuZ0+FdV3Kre2W6Ut/cH3JY3dwWMpND8vavzd98VN/cE6ZS2DwX3Z
F5di81iKzGMpMveZX99rbqNP+bXmxce8+IU/R0IiI/m1t3Qlw+69Fwdl3h7dm0tmxY3gSN/9sQX7
/mXsOnFm3Ytp5UrMKjXbdWdQAHLNYLfb45adh3TyZLSio2ODnDp9Xpu3HzTr3TDLmG3QLmvKQFZp
oxKyy81gL9L1gnpdL2oMYu9z5wG7fpzOXYjXinW7lJ6Rq093HFB0Ql7weOxy1woblW5KwJnLuWb7
HlDi9ayHLQBrU8xrhvKvXdR4a74mu+qU89QTyn/uCU31NGikIVM5P3tCea//G+VXtQYvXnk15kWM
kAhNSduI4o7t0C9eXa+qnkmtWPKiVn2Rq/OxJxWd06aiokJ9uPRDvbx4s05eTdfa3YeU09StTz9Z
r31XG5Rw9bx2RGeovHVQxeXleuGX/0N/+dSHSm2bVV5mgv7mr/+nfrUhWhWVFVr20cd6+bWPdCi5
RqnXLuvDj1fohRde06rDKSqvb9T61av02qJ3tfV0pqpu9Gn3jtV64fUlev6dFdp9tVKV1TVauWqZ
Xnt9pY5ntCjuwkG9/tqH2rQ/WYWtpgiEPD9CIiW2oMdnVeuiGeK2pGfYI2gmmWWtupBUoC/OXzd7
32k6diFVx2PTdS2/PvjZ3HJ2HXtY3p5DkJxTpuKGruB2C0yxsMP78/0nlZ2VrT1Rx4Nkmcv7DpwM
1rXL2O2voNaUhrImJedW6kJikdLtWxPm52lm798WhbjUEu07dFbNza1BcvOKtfvwBbPXb48itt5b
tkVZZS06eyVP5W1DpgBkP3wBMDsLKki7fLcAdNYq75knVPTqvzJ7/00abcpR/rNPqGDRv1VhTZsK
zd5EodkbISRi09iv0opCvfj8+7pcVK7Fb76vxJoBrVv6knZfydeaN1/Ub5ft0rLFr+iZ1z/Qy28t
1Yn4LP3qb/9cr29P1K5PVuiTU7mqaR9WSWmRPlz1tl567X3ti6/Uwc+268XF7+qN7adU1XRLp2Li
tPy91/XkO3sUfWKb/v4f3lNcwiX96ul3lVzTpdgrV/TJ2o/0N88tU3TMeT3/ygqlV7fq+ed+osUH
E7Rr+RL9oyki6z9epF+8tUGfrFms597fo9z6HhWZF6vQ50dIhKSkqUeJObW6dL3UDO5byiy3R8U6
FGu+37vvuFJSMpRyzSZTF2KuaO+RGOXXdgfL2dh1Lppl47OqlJJXYW6vNzgEX1jfrezqW4o6dFoJ
8UnBnrvN1auJ2n/4TLCuXabALtvQo5yKVqXkVysmuUQZ9nB+eZsyyu25RTeCAb9uywFdv56hnu4u
RR04rqiTV4IjB3a5u8u2mdtoU3R8vqraR5SU+ggFoHVIKkq/+i0F4N+puM4exuxXcWM3IRGd2lv9
+nTLOi3+cJXe2XhIdb0zWr/uXe0/Z4bz3z+ptzcd0NbP9ulYYoH27f1UL3+wQWuWf2L2xj/QCx9t
1sXSPlW2DaqsvEhLVizT4VPntOTNd/X2+igdOHlMb+04rvi4WL22eI253WX62Tu7dfrMHn20/YIa
2hr02vPvae+ZK1ry9kpt2PqJfvLqKm1Zv0mLNl5Wj6RD+7do7cFTevkXv9BLq/Zq2+4DOnQlSzs2
LdXmU3mq67BvL4Q/N0IiJWWtfUrOq9OlVFMAzB65PexvB+s5s93u3nNIpcXFysvNU0FBgeKvxuvT
vSdVYMqzXc7GrmPLQ0JOja7lV6q0qc8M9W4VmWXya7u0efsBJVxN0MW4yyaXlJSQqC3b9yu36law
TGGwbK9yK1t1vbBGsSmlyjR78vatgezKdhWZHW67t793zwFFn4vTqvU7lRifqFVrtupyRrm5j06z
nD1p+GZwNCI6vkA1t8ZMAch5uAKwyhSAG8NSSWa8Gf7Vmhlov1cA/rVuj/ZovN3cyb0CUNrQodLW
QZU29xIS0anqnlL6pSP6j//hT7XhQo06hia1eulL2nO1RNs+WKz3tp/VxaRMJRV3KCvtvP7rf/5z
Hc9v1Dsv/lA/fmGrKnpvq6JtSBWmALzy9qu6XtujN578X/qHjclKTTyhl7Ye0b41y/T8imM6vHut
/u+Lm3T61A4tXn9Ctc01evGfFmnFyvX69Vvbde5slP76l0t0KvasfvGrV3U6MV1PP/szfXA0VQc3
LNcbaw+aF7gcJZW0avfGN7XmcIbqbo2EPi9CIimVNwbMnneDrqSVB3vkdvDak/OyKm7qSHSydh26
oD1HYoPsPhwTfGIgzwzdYDmTIrOOXTcpt1ZpZoBXmFJvz8kpNilrGQg+JRB17JIOnY4PEnXsohny
hcHPSkxZsMuVNA+ooPqm0ovrzPJlZk/eFovO4OhCoSkJCTnV2n/8ko6eSw7eavj8aJyOX7gWPEZb
MuxyNvYthfMJharrmlBy2iMUgPZxqTTjkm6deUudsR8p7+dPqNAM/a5Ly9Vx9i3l/cwUgFf+pcob
b6nctIXy1n5CIjtmO6iuq9e2qMO6Vjuk+o5BxcVfVUJ5j2rqa7Vx/Vp9uHqnLhbeUm1To3YfPK28
m2O6ePGijiVVmgFstiPzYlHR0KZTF+NVcHNUyUnZSiy+pfySEh2/Vq7SygqtNnv1G3Yd15HEEqXn
5So6pUxVre06fjZZGeXm/rdt0ertpiycz1Bp57iuxJ3Tpu1Reu6F57T+fKlu3OrQp1vsY9mqC7lm
LyMtRRdzGlXdPhT+vAiJoNjtIKWgUfHplarpGFG5GczlLf2qaB1Qndme6s0wtQPVxl6uumm2W/Pz
u8sNqNasE59eYQpAnTKKa9Vglqk1e+BBOkbV1Duj1sE7ah24F3O5qW/G/OzeMib2tksbOpVeUq84
s30XmUFui8TcY7H3Wd81qVrzeKqDy+bxdE4EjzF4LOZ5BJebenXOFICGnilTAHIfvgB0jN5ReWWN
So4tU8mJZSo9s1qlp1cHl0tOmu9PrVZZzKeqbO0zjWkoOHRJSGRnQJVmaNuNutaevW82wPquadWa
F5TK9jGzoUttZmO331fcGFFL/21Vm3Xqu2fU2DUWbLD2NipMkWjongp+E1ht96TqOoZUZdZv7BwL
vrYNKVi3yaxT0zFhXmDMuubKxt4p1bSPyp6/02p+3tI/q6r6Ju3ctV3rNqzXO6sOKqN1OHgRMq8j
wWOxh/1rOqeCvf+79x/2vAiJnFTfHAr24mOSinX5epkup5Y/Wsw6scklZk++V5mljcooqlNWacMj
J7WgWkWmBKQVNSsmsejebT+QsOvmYn4Wa56DPZ/Bvl6kPHQBWGUKwJApADfHVdErVfRIlX13Yy/b
64Lv7WXzYhUctjQl4Gux1xNCFiZ222zp1fW8cl3NqlBR62iwd2LPCA5d/p8Re5skEmOK7vctpqlX
mm3HfrQ2p/qWcqs7Hyl2nZKm/uAju2Xmtgrqu4LYTxc8bOyJgLZABNuwiT2sn2sfS425j7mE3PeD
yTPL2T+nxj5TANIfsgCsXLk6pW9c6ugb1Y3uQd3sHvpu6Vm4tPcMR256FzYdvSMLF/N3NlJzKyz9
Y+oemlLP8JS6BsbCl3kcMfezkOmM5AyML1i6FjKDE/Oa7qEJs91MfqfYdbsGx9Ud3I79/rvk3uMw
6THfP3gfvd+aqeCrXbZ/4s7DvwWw3BSA4WlpcnxMQ4MDGh4a/E4ZGR5asIyODEdsxkZHFjTjY6ML
Fvt3NlIzNTG+YJmemljQzExPRWxuz0wvWGZvzyxY7szejuiY/zxcdEf2v0mpj1AAzE6DxsbGNDAw
oMHBwa9nyAxZ8/Mx86I7PDz8ZYbM4J9bZsgs8zAZHjZDY3zcvICPmeLwu+tGRu5m2Az0B9f5ttz/
mCItc//fFiqjo6MLFvt3NlITbEMLlImJiQXN5ORkxGZqamrBMj09vWCZmZmJ6Ny+ffuhcseUgJnH
WwDMkB3sV2tjnSoqqtR246Zu3OhQX1+f+vt/t3zYYP5azMAaGuhTY0OtKmvq1Ddoh9iQBgf61d/X
qxutbeobsQ1/wtzno5SKrw/GSEnYUHaZsMHsKg8OxUhK2GB2lbCh7DJhgzFSEjaYXSVsMLtK2FCM
pIQN+7A89gIwNjmtloKLeuHHz2rVll26lpat4vIindi2TRfT6s1dWXc0PjJslg8f0HOZvjOj/At7
9fQ/vqJN+46qpc/csdGQdl57d55UTnaeqqoqVFJYr8mZqYcuAWGDMVISNpRdJmwwu8qDQzGSEjaY
XSVsKLtM2GCMlIQNZlcJG8yuEjYUIylhwz4sj78ATE2rOuWEPn7nM90cHlVXW70qKoq1b8VKxabW
qiYnXlFRp1Tf2R+8Jxw2oOdi/hh1/fA2rdsSrUFTLCZGbunSqQNauuh1bdx2Vk21lTq04nX9zf/+
JxXcGNDE+Gjo7TyYsMEYKQkbyi4TNphd5cGhGEkJG8yuEjaUXSZsMEZKwgazq4QNZlcJG4qRlLBh
H5Z5KAAzasqO1i//6qdauXW3kuJOatOq7TqwfY9OfnFML/zgB/rJkz/Sxuhszdq99pABPZdp3VbW
yW368ZO/1f7oNGXEH9GGTft14JOlWrfjoPas/URb167W4jfWq3lo/FsLxVzCBmOkJGwou0zYYHaV
B4diJCVsMLtK2FB2mbDBGCkJG8yuEjaYXSVsKEZSwoZ9WB5/AZieUWXiUa34+GBwdmFzVrTWLt+m
PZ98qn07d+q5n/1Gp+MTVVp/Q6Njv3+P3TwVpezfpLWbzmncbMgJxz7VZ8eSlXxks5Zv3KVda7bq
yIEorV++X/23ZzUSchthCRuMkZKwoewyYYPZVR4cipGUsMHsKmFD2WXCBmOkJGwwu0rYYHaVsKEY
SQkb9mF57AVgxGzwLaXpOnsqWcPmD6K9Okex564oIeaiiipqdenQdq1cu0FX8mvNxjkeOqDnMjE9
pZrMWC15c4mWb4tSXU2ptq7+QO9/vFox8WlKvHBFxYV5Wr/yI6VUtGtyYiz0dh5M2GCMlIQNZZcJ
G8yu8uBQjKSEDWZXCRvKLhM2GCMlYYPZVcIGs6uEDcVIStiwD8tjLwCD5rrh0THzl288uDw0MqaJ
yYlgD37MvAhPmj+cyeDytx+ut7c3Oj5pHuiM2ZDHNTo2rungCd7WlLnNCfMX3L7A2Cc8+ggfBwwb
jJGSsKHsMmGD2VUeHIqRlAeHssuEDWWXCRuMkZKwwewqYYPZVR4ciJGWsGEflsdfAB4yYYPZVcIG
Y6QkbCi7TNhgdpUHh2IkJWwwu0rYUHaZsMEYKQkbzK4SNphdJWwoRlLChn1YKAARlrCh7DJhg9lV
HhyKkZSwwewqYUPZZcKGU6QkbDi6SthgcpWwYRdJmZ2dfajYj+TfftQCMDip4AWVAkAeNWGlwFUe
LATETcIKicuElRIy/wkrY64SdjQkkhJWBsNif1305OydRysA/WN3gkEaNtTt1/7+fkLIt+T+X41N
yHzE7qQR8k2x/57P0MSMkh7lHwMKKwB2766j45Zy84pUWlapsvIqQsg3pKS0QoVFpXdPlL23LdlC
MDr89X84KywjJnbZ+7fBh4k9EhJ2PSEk8hK8njyOAmBfWJqaWtTQ2CwA384W5d7e3mBbsp9iae7o
186UTkWl9+hgVq8OZfVpf0aP9qV1a1/6V7MjpUsXi3s0MWr28sz2Nzpy91+6tJft9mhv0x4KvX8b
tbl582bQ/Oe+/6a3ZuYO39+/LiHk+5XHWgCam1vVZALg25VXVH9ZAMbNAC9r7tPm5D7Flo9qT1qv
dqf16Whuv+KqJhVXM6uYyimdKx3R+bJRHc4b0aHMbk2aAmAH/41b/eruvbtB2+3RvsVQXl7+lWFv
7ycxMTH4h7nmluno6PgythzY3Lhxw2zLzWptbf3K+oSQ71coAMACebAAVLT06bPUAX2R1akrOXW6
klmuUzmd+iK9TVGxOTqe2qirddO6Uj2hE4UjOpbTranRIc1MDmvVvgodiK/R7PTdf4LbDvTXX389
GPZz26r9mpycHFxnl+ns7FRGRoaysrKUmZmp1NRUXb16VTExMTp79qwuXLignp6eYNn7t3VCyPcj
FABggYQVgJ2mAJzIH9CnWz7RL//+rxST167Pr1Rq056T2h2bq9jCXkUXdepk0VhQAG6b4d/S3qM3
Nxbrna1xGhzoDQ7d2wKwaNGiby0AlZWVqqmpUVFRUXDZfi0oKFBFRUWw7K1btygAhHxPQwEAFkjo
EYD0AR1M61DUySva8fl27YvPVXROl04nVeloVrOOXanQobQqnSqeCArAndsj2hVbq+OX67Ro+XnF
xBbr9u2JoAC8/fbb31oA7PC3g7+qqkqlpaXB2wZlZWVqamrS9evXg9uhABDy/QwFAFgg4UcA+nS5
clSfp3Xr8/RunSwY0OWCW/riUrEOpzfoREKNjmTUBgXguH0LYHxE8ZmVqq4sU1xcjlIu5Wpickxd
XV1avHhxsG1+UwGwy9iBb9PS0hK8519fX6+GhobgOnu+AEcACPn+hgIALJDwAtCvCyWD+iK7R6cK
BnUst1dxee06Gldg9vzrdPxqlSkC1V8eAZieGdNgeY1asvJ0/qN31ZSRqsmZmWAP3haA9vb2L8/m
f7AA2CMAdm/fDnt7JKC6ulr5+flBGbDfX7lyhQJAyPc4FABggXzTOQBHs7oVczlB+/bs0vn8Dp3I
7tKF7Js6XdCpM+mtOpV348tzAOynAMZv31H+iXM6tWyZRu/c0Z3ZWR08eFB/8id/ojNnzgS/GtRu
ow8WADvc7eF/+36/fQvAfrWFYO7tgISEBAoAId/jUACABRJ6DkDagL7I6dWWzZv1zE//WqfSqrQ3
vkafRJ1R1MUiJTZL8bXTOlE4fPckwJlJNReX6MCPfq7yizFqTkvX1MxMsCf/F3/xF8FQn/t9AGEF
oLCwUCUlJcHyOTk5ys7O/jKxsbGcA0DI9zgUAGCBhBWA3ekDOpnbrX2Xy3XwaoYOXKtUTPYNHTyb
qoMplTp7rV7Hsxt0puTuWwAzUxNqKihQ9unDKrsco8rkFA2PjQVD276fb7fLuW30/gJgL9vfA2AL
gi0B9uz/+zNXDOaWvX9bJ4R8P0IBABbIgwWgrLlXKy9361jBsHalD+qztGHtzx7R4ex+7U/vVlRm
r6LSuszXbm1PHVRUeqcmR/rNwB/VxO1ZjU1Na9Ts7Q+YwT44OKAx+97/wO9+77fdTu3n/O193v1+
4Fv/sR67zNz6hJA/3Nht+f6ZbUMBABbIXAGw28+Y2X4Gxm7ratW44qvHlVgzESTBJD74OhlcnsvF
inGV3pzU7OxtTU6HZ+pr38+qte2mJiZnvnI9IeT7namZWY1PTN4rAhQAYMHNFQB7uL6ruzs4HN9c
X2VS/a1pMWmorVZFZZUqHyG1tXWh1xNCvr8pKytXQ0Pj187noQAAC2SuANjD8Pb9+uLi4mC7IoSQ
x5nu7q7gV37ff06QDQUAWCD3FwD7y3caGxvv/QQAHp/p6engV3xzBADwxIMFwB4FAIDHbXJykgIA
+IQCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAA
AJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABco
AIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAF
CgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABw
gQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAA
XKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoA
ABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYC
AMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6h
AABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBn
KAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDg
GQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIA
eIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAA
AJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABco
AIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAF
CgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABw
gQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAA
XKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoA
ABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYC
AMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6h
AABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBn
KAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDgGQoAABcoAIBnKAAAXKAAAJ6hAABwgQIAeIYCAMAFCgDg
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
AABJRU5ErkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="SCSM_ViewManager" children="Controls">
    <Property name="AllowDrop">True</Property>
    <Property name="ClientSize">983, 611</Property>
    <Property name="FormBorderStyle">FixedSingle</Property>
    <Property name="Icon">
      <Binary>AAABAAEAEBAQAAEABAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAA
AAAAAADw9vwA////AABmzABgoN8AwNnyACB50gCAs+YA4Oz5AJC86QBAjNkAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAIiIiIiIiIiJWZiIilmMiIpERIiJhFCIikREiImEUIiKRESIiYRQiIpERIiJh
FCIikREiImEUIiKRESIiYRQiIpERIiJhFCIikREiImEUIiKRESIiYRQiIpERIiJhFCIikREoRHEQ
REKRESQRERERElZmI2ZmZmZiIiIiIiIiIiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</Binary>
    </Property>
    <Property name="MainMenuStrip">
      <Reference name="menustrip1" />
    </Property>
    <Property name="MaximizeBox">False</Property>
    <Property name="Name">SCSM_ViewManager</Property>
    <Property name="SizeGripStyle">Hide</Property>
    <Property name="Text">View Manager</Property>
    <Event name="Load">SCSM_ViewManager_Load</Event>
    <Object type="System.Windows.Forms.ProgressBar, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="loadingBar" children="Controls">
      <Property name="Location">419, 522</Property>
      <Property name="Name">loadingBar</Property>
      <Property name="Size">552, 61</Property>
      <Property name="TabIndex">9</Property>
      <Property name="Visible">False</Property>
    </Object>
    <Object type="System.Windows.Forms.PropertyGrid, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="propertygrid1" children="Controls">
      <Property name="CategoryForeColor">InactiveCaptionText</Property>
      <Property name="Location">419, 27</Property>
      <Property name="Name">propertygrid1</Property>
      <Property name="Size">552, 556</Property>
      <Property name="TabIndex">6</Property>
    </Object>
    <Object type="System.Windows.Forms.StatusBar, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="statusbar1" children="Controls">
      <Property name="Location">0, 589</Property>
      <Property name="Name">statusbar1</Property>
      <Property name="Size">983, 22</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">Management Pack :: NotLoaded</Property>
    </Object>
    <Object type="System.Windows.Forms.TreeView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ManagementPackViews" children="Controls">
      <Property name="AllowDrop">True</Property>
      <Property name="ContextMenuStrip">
        <Reference name="folderContextMenu" />
      </Property>
      <Property name="ImageIndex">0</Property>
      <Property name="ImageList">
        <Reference name="imagelist1" />
      </Property>
      <Property name="Location">12, 27</Property>
      <Property name="Name">ManagementPackViews</Property>
      <Property name="SelectedImageIndex">0</Property>
      <Property name="Size">401, 556</Property>
      <Property name="TabIndex">0</Property>
      <Event name="AfterCollapse">ManagementPackViews_AfterCollapse</Event>
      <Event name="AfterExpand">ManagementPackViews_AfterExpand</Event>
      <Event name="ItemDrag">ManagementPackViews_ItemDrag</Event>
      <Event name="AfterSelect">ManagementPackViews_AfterSelect</Event>
      <Event name="NodeMouseClick">ManagementPackViews_NodeMouseClick</Event>
      <Event name="NodeMouseDoubleClick">ManagementPackViews_NodeMouseDoubleClick</Event>
      <Event name="DragDrop">ManagementPackViews_DragDrop</Event>
      <Event name="DragOver">ManagementPackViews_DragOver</Event>
    </Object>
    <Object type="System.Windows.Forms.MenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="menustrip1" children="Controls">
      <Property name="Items">
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="fileToolStripMenuItem" />
        </Item>
        <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="editToolStripMenuItem" />
        </Item>
      </Property>
      <Property name="Location">0, 0</Property>
      <Property name="Name">menustrip1</Property>
      <Property name="Size">983, 24</Property>
      <Property name="TabIndex">5</Property>
      <Property name="Text">menustrip1</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="fileToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="loadManagementPackToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="unloadManagementPackToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripSeparator, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="toolstripseparator2" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="exitToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">fileToolStripMenuItem</Property>
    <Property name="Size">37, 20</Property>
    <Property name="Text">File</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="loadManagementPackToolStripMenuItem">
    <Property name="Name">loadManagementPackToolStripMenuItem</Property>
    <Property name="Size">214, 22</Property>
    <Property name="Text">Load Management Pack</Property>
    <Event name="Click">loadManagementPackToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="unloadManagementPackToolStripMenuItem">
    <Property name="Name">unloadManagementPackToolStripMenuItem</Property>
    <Property name="Size">214, 22</Property>
    <Property name="Text">Unload Management Pack</Property>
    <Event name="Click">unloadManagementPackToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="exitToolStripMenuItem">
    <Property name="Name">exitToolStripMenuItem</Property>
    <Property name="Size">214, 22</Property>
    <Property name="Text">Exit</Property>
    <Event name="Click">exitToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="viewContextMenu" children="Controls">
    <Property name="Items">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="copyViewToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="deleteViewToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="renameViewToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">viewContextMenu</Property>
    <Property name="Size">136, 48</Property>
  </Object>
  <Object type="System.Windows.Forms.ContextMenuStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="folderContextMenu" children="Controls">
    <Property name="Items">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="newFolderToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="deleteFolderToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="renameFolderToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="newFolderToolStrip" />
      </Item>
    </Property>
    <Property name="Name">folderContextMenu</Property>
    <Property name="Size">154, 70</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="editToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="viewToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="folderToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">editToolStripMenuItem</Property>
    <Property name="Size">39, 20</Property>
    <Property name="Text">Edit</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="viewToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="copyViewMainToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="deleteViewMainToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="renameViewMainToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">viewToolStripMenuItem</Property>
    <Property name="Size">99, 22</Property>
    <Property name="Text">View</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="folderToolStripMenuItem">
    <Property name="DropDownItems">
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="cloneFolderMainToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="deleteFolderMainToolStripMenuItem1" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="renameFolderMainToolStripMenuItem" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="newFolderMainToolStrip" />
      </Item>
      <Item type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <Reference name="newFolderFromTemplateToolStripMenuItem" />
      </Item>
    </Property>
    <Property name="Name">folderToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Folder</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="copyViewToolStripMenuItem">
    <Property name="Name">copyViewToolStripMenuItem</Property>
    <Property name="Size">135, 22</Property>
    <Property name="Text">Copy View</Property>
    <Event name="Click">copyViewToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="copyViewMainToolStripMenuItem">
    <Property name="Name">copyViewMainToolStripMenuItem</Property>
    <Property name="Size">135, 22</Property>
    <Property name="Text">Copy View</Property>
    <Event name="Click">copyViewMainToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="newFolderToolStripMenuItem">
    <Property name="Name">newFolderToolStripMenuItem</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">Clone Folder</Property>
    <Event name="Click">newFolderToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="cloneFolderMainToolStripMenuItem">
    <Property name="Name">cloneFolderMainToolStripMenuItem</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">Clone Folder</Property>
    <Event name="Click">cloneFolderMainToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripSeparator, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="toolstripseparator2">
    <Property name="Name">toolstripseparator2</Property>
    <Property name="Size">211, 6</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="deleteViewMainToolStripMenuItem">
    <Property name="Name">deleteViewMainToolStripMenuItem</Property>
    <Property name="Size">135, 22</Property>
    <Property name="Text">Delete View</Property>
    <Event name="Click">deleteViewMainToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="deleteFolderToolStripMenuItem">
    <Property name="Name">deleteFolderToolStripMenuItem</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">Delete Folder</Property>
    <Event name="Click">deleteFolderToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="deleteFolderMainToolStripMenuItem1">
    <Property name="Name">deleteFolderMainToolStripMenuItem1</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">Delete Folder</Property>
    <Event name="Click">deleteFolderMainToolStripMenuItem1_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="deleteViewToolStripMenuItem">
    <Property name="Name">deleteViewToolStripMenuItem</Property>
    <Property name="Size">135, 22</Property>
    <Property name="Text">Delete View</Property>
    <Event name="Click">deleteViewToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="renameViewMainToolStripMenuItem">
    <Property name="Name">renameViewMainToolStripMenuItem</Property>
    <Property name="Size">152, 22</Property>
    <Property name="Text">Rename View</Property>
    <Event name="Click">renameViewMainToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="renameFolderMainToolStripMenuItem">
    <Property name="Name">renameFolderMainToolStripMenuItem</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">Rename Folder</Property>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="renameViewToolStripMenuItem">
    <Property name="Name">renameViewToolStripMenuItem</Property>
    <Property name="Size">145, 22</Property>
    <Property name="Text">Rename View</Property>
    <Event name="Click">renameViewToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="renameFolderToolStripMenuItem">
    <Property name="Name">renameFolderToolStripMenuItem</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">Rename Folder</Property>
    <Event name="Click">renameFolderToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="newFolderMainToolStrip">
    <Property name="Name">newFolderMainToolStrip</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">New Folder</Property>
    <Event name="Click">newFolderMainToolStrip_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="newFolderToolStrip">
    <Property name="Name">newFolderToolStrip</Property>
    <Property name="Size">153, 22</Property>
    <Property name="Text">New Folder</Property>
    <Event name="Click">newFolderToolStrip_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ToolStripMenuItem, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="newFolderFromTemplateToolStripMenuItem">
    <Property name="Name">newFolderFromTemplateToolStripMenuItem</Property>
    <Property name="Size">218, 22</Property>
    <Property name="Text">New Folder From Template</Property>
    <Event name="Click">newFolderFromTemplateToolStripMenuItem_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ImageList, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="imagelist1">
    <Property name="ImageStream">
      <Binary>AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAAOCQAAAk1TRnQBSQFMAgEBAwEAARgBAAEYAQABEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAARADAAEBAQABCAYAAQQYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wEAAf8O9BH/IAABCQ60AQkQ/wFyDSgBchEAAbQB3AzW
AdwBtA4HAv8BKAX/AvYB/wH2A/QB8wEoEQABtAHcDNYB3AG0AbwMtAHwAv8BSQH/AXIB/wNyAfQB
cgEbA3IBGwFJEQABtA7cArQBCQvcAbsC/wFKAv8B9gH/AfYB9AHzBhsBShEAAbQO3AK0AQkB3ArW
AbQC/wFKAf8BcgH/A3IBGwFyARsDcgEbAUoRAAG0DtwDtAEJCtwBtQHdAf8BUAH2Af8B9gH0AfMG
GwEaARsBUBEAAbUBCQzcAQkBtQK0AQkL3AG1Af8BUAH2AXIB9ANyARsBcgEbA3IBGwFQEQABtQHc
BQkH3AEJAbUDtAEJCtwBtQHzAVAB/wH0AfMGGwIaAQgBGwFQEQABtQcJB9wBtQG0AbsCtAH0ChkB
8AFQAfYBcgEbA3IBGwFyARoDcgEbAVARAAi1AQkG3AG1AbQB3AG1CrQBvAHwAfQBcgH2A/QB8wgb
AXIRAAHvAfQF8gEJAbUGCQG1AbQBCQTcBgkBtQH0Av8OcwFyEQAB8QHvBv8Buwa1AfEBtAH0BBkH
tQP/AXINmQFyEgAB8QbvAfEHAAEJBbUK/wFzDZkBcyEAEP8BCA1zAQghABD/IAABQgFNAT4HAAE+
AwABKAMAAUADAAEQAwABAQEAAQEFAAGAFwAD/wUAAv8HAAEBBwABAQcAAQEHAAEBBwABAQcAAQEH
AAEBBwABAQcAAQEHAAEBBwABAQcAAQECAAGAAX8DAAEBAgAC/wMAAQECAAL/AgAC/wIACw==</Binary>
    </Property>
    <Property name="TransparentColor">Transparent</Property>
  </Object>
  <Code><![CDATA[#region Global Variables
# Creates a global variable used to store the Management Pack Path
New-Variable -Name ManagementPackPath -Scope Global
# Creates a global variable used to store the Management Pack XML data
New-Variable -Name ManagementPackXml -Scope Global
#endregion

<#
	This function is used to GEt the SCSM Views currently located on the Management Pack XML. 
	The function requires that you provide the ID of the Parent folder, and the Parent Node where the views will be added to. 
#>
function Get-SCSMViews($id, $parentNode)
{
	# Variable used to store all of the views that have the parentID that was received on the parameter
	$views = $ManagementPackXml.ManagementPack.Presentation.FolderItems.FolderItem | ? ElementID -Like "View.*" | ? Folder -eq $id
	foreach ($view in $views) # Loop through the Views that were found
	{
		# Create a new TreeNode object
		$currentNode = New-Object System.Windows.Forms.TreeNode
		# Query the XML file to get the DisplayString.Name value and store it on a temporary variable.
		$tempViewName = Get-SCSMStringName -ID $view.ElementID
		# Configure the Node information.
		$currentNode.Name = $tempViewName
		$currentNode.Text = $tempViewName
		$currentNode.Tag = $view.ElementID
		$currentNode.ImageIndex = 2
		$currentNode.SelectedImageIndex = $currentNode.ImageIndex
		$currentNode.ContextMenuStrip = $viewContextMenu
		# Add the new Node to the parent Node provided in the Parameter.
		$parentNode.Nodes.Add($currentNode)
	} # endloop
} # endfunction

<#
	This function will be used to get the SCSM Folders currently located on the Management Pack XML.
	The function will require that you provide the ID of the Parent folder, and the Parent  Node where the folders will be added to.
#>
function Get-SCSMSubfolders($id, $parentNode)
{
	# Variable used to store all of the subfolders that are found to have the same Parent Folder ID received from the parameters
	$subfolders = $ManagementPackXml.ManagementPack.Presentation.Folders.Folder | ? ParentFolder -Match $id
	if ($subfolders -ne $null) # Ensure that the folder does have subfolders.
	{
		foreach ($folder in $subfolders) # Loop through the Folders that were found.
		{
			# Create a new TreeNode Object
			$currentNode = New-Object System.Windows.Forms.TreeNode
			# Query the XML file to get the DisplayString.Name value and store it on a temporary variable.
			$tempFolderName = Get-SCSMStringName -ID $folder.ID
			# Configure the Node information.
			$currentNode.Name = $tempFolderName
			$currentNode.Text = $tempFolderName
			$currentNode.Tag = $folder.ID
			$currentNode.ImageIndex = 0
			$currentNode.ContextMenuStrip = $folderContextMenu
			# Add the new Node to the parent Node provided in the Parameter.
			$parentNode.Nodes.Add($currentNode)
			# Change the Status Bar information to give a sense of progress.
			$statusbar1.Text = "ManagementPack :: Loading Management Pack Data :: Gathering data on $tempFolderName."
			<#
				This function was used recursively in the past but the idea was scrapped due to performance issues.
				This area was commented to remove the recursive feature.
			
				Get-SCSMSubfolders -id $folder.ID -parentNode $currentNode
				Get-SCSMViews -id $folder.ID -parentNode $currentNode
			#>
		} # endloop
	} # endif
} # endfunction

<#
	This function is used to load the core information on the TreeView.
#>
function Load-TreeView()
{
	if ($ManagementPackXml.GetElementsByTagName("Folders") -ne $null) # Ensure that the management pack loaded contains 'Folders' items. 
	{
		# Set the status bar to notify the user that the data is being loaded.
		$statusbar1.Text = "ManagementPack :: Loading Management Pack Data"
		# Disable the View Manager form so that the users cannot click on things while data is loading.
		$SCSM_ViewManager.Enabled = $false
		# Show the Loading bar
		$loadingBar.Visible = $true
		# Get the root folders from the XML File. Root files can be adentified because they contain the parent folder 'ServiceManager.Console'
		$rootFolders = $ManagementPackXml.ManagementPack.Presentation.Folders.Folder | ? ParentFolder -Match "!ServiceManager"
		# Display the number of root folders found in the status bar.
		$statusbar1.Text = "ManagementPack :: Loading Management Pack Data :: $($rootFolders.length) have been found."
		# Increment the loading bar to show that the first step was taken.
		$loadingBar.Increment(10)
		<#
			TODO:This function was designed to start with the root folders because it was required for the recursion. 
			Since recursion has been removed this function can be modified to no longer start with the root folders and move to the 'Get-SCSMSubFolders' functions right away.
		#>
		foreach ($folder in $rootFolders) # Loop through each of the root folders.
		{
			# Create a new TreeNode Object
			$currentNode = New-Object System.Windows.Forms.TreeNode
			# Query the XML file to get the DisplayString.Name value and store it on a temporary variable.
			$tempFolderName = Get-SCSMStringName -ID $folder.ID
			# Configure the Node information.
			$currentNode.Name = $tempFolderName
			$currentNode.Text = $tempFolderName
			$currentNode.Tag = $folder.ID
			$currentNode.ImageIndex = 0
			$currentNode.SelectedImageIndex = $currentNode.ImageIndex
			$currentNode.ContextMenuStrip = $folderContextMenu
			# Add the new Node to the ManagementPackViews.Nodes property (This is the root section).
			$ManagementPackViews.Nodes.Add($currentNode)
			# Increase the loading bar by 90 (this is 90 because we already increased by 10 before) divided by the number of root folders found.
			$loadingBar.Increment(90/$rootFolders.length)
			# Note the status bar with the progress.
			$statusbar1.Text = "ManagementPack :: Loading Management Pack Data :: Gathering data on $tempFolderName."
			
			<#
				This function was used recursively in the past but the idea was scrapped due to performance issues.
				This area was commented to remove the recursive feature.
			
				Get-SCSMSubfolders -id $folder.ID -parentNode $currentNode
				Get-SCSMViews -id $folder.ID -parentNode $currentNode
			#>			
			
		} # endloop 		
		# Acknowledge completion on Status bar
		$statusbar1.Text = "ManagementPack :: Loading complete."
		# Expand the Nodes.
		$ManagementPackViews.ExpandAll()
		# Reset the loading bar 
		$loadingBar.Value = 0
		# Hide the Loading bar as it is no longer needed.
		$loadingBar.Visible = $false
		# Now that the data is loaded enable the form again.
		$SCSM_ViewManager.Enabled = $true
		# Update the status bar.
		$statusbar1.Text = "ManagementPack :: Data Loaded"
	} # endif
	else # If there is no 'Folders' items return an error
	{
		# Error to be displayed if no Folders Items were found.
		[System.Windows.Forms.MessageBox]::Show("No folder structure found!", 'Management Pack Failure', 'OK', 'Error')
		# Update the status bar.
		$statusbar1.Text = "ManagementPack :: ERROR."
	} # endelse
} # endfunction

<#
	This function will be used to refresh the node when a View you copy a view. 
	This function was deprecated due to performance issues
#>
function Refresh-TreeViewNode($nodeToRefresh)
{
	foreach ($node in $nodeToRefresh.Nodes) # Loop through the subnodes of the node we want to refresh.
	{
		# Remove the child nodes.
		$ManagementPackViews.SelectedNode.Parent.Nodes.RemoveAt($node.Index)
	} # endloop
	
	<#
		This is no longer needed because empty nodes are reloaded again automatically.
	
		Load the nodes once again using the 'Get-SCSMView' function.
		Get-SCSMViews -id $nodeToRefresh.Tag -parentNode $nodeToRefresh
	#>
} # endfunction

<#
	This function will create a copy of the SCSMView that is selected.
 	The function will call the EnterNewViewName form to get a new name.
#>
function Copy-ViewAction()
{
	if ((Call-EnterNewViewName_psf) -eq 'OK') # Check if the Call-EnterNewViewName function ended with an 'OK'
	{
		# Get the new view name from the EnterNewViewName form textbox.
		$newViewName = $EnterNewViewName_newName_txtBox
		# Get the Parent Tag of the selected Node (The parent folder of the view)
		$parentNode = $ManagementPackViews.SelectedNode.Parent
		$parentID = $ManagementPackViews.SelectedNode.Parent.Tag
		# Get the ID of the View that was selected 
		$selectedViewID = $ManagementPackViews.SelectedNode.Tag
		# Copy the View on the XML File, and save the return new View ID. 
		$newViewID = Copy-SCSMView -viewName $newViewName -parentID $parentID -originalViewID $selectedViewID
		# Create a new Node object
		$newChildNode = New-Object System.Windows.Forms.TreeNode
		$newNodeName = $newViewName
		# Configure the new Node
		$newChildNode.Name = $newNodeName
		$newChildNode.Text = $newNodeName
		$newChildNode.Tag = $newViewID
		$newChildNode.ImageIndex = 0
		$newChildNode.ContextMenuStrip = $viewContextMenu
		# Add the new Node
		$parentNode.Nodes.Add($newChildNode)
		<#
			For performance issues we stop refreshing the parent node from XML and simply add the newly created item to the treeview.
		
			# Refresh the Parent Node to find the newly created View.
			Refresh-TreeViewNode $ManagementPackViews.SelectedNode.Parent
		#>
	} # endif
} # endfunction

<#
	This function is used to clone a folder and its subitems.
	This function will require that you send as parameters the node that you want to close and the parent node that will contain the newly created folder.
#>
function Clone-Folder($nodeToClone, $parentNode)
{
	# Create a variable to store the name of the node to clone
	$folderName = $nodeToClone.Name
	# Create the SCSM Folder on the XML and save the new ID.
	$result = New-SCSMFolder -folderName $folderName -ParentFolderID $parentNode.Tag
	# Create a new Node object.
	$newNode = New-Object System.Windows.Forms.TreeNode
	# Configure the new node
	$newNode.Name = Get-SCSMStringName -ID $result
	$newNode.Text = Get-SCSMStringName -ID $result
	$newNode.Tag = $result
	$newNode.ImageKey = 0
	$newNode.ContextMenuStrip = $folderContextMenu
	# Add the new node
	$parentNode.Nodes.Add($newNode)
	# Get the newly created node object
	$newParentNode = $parentNode.Nodes | ? Tag -EQ $result
	# Get the child nodes of the original Node
	$childNodes = $nodeToClone.Nodes
	foreach ($node in $childNodes) # Loop through each of the subitems
	{
		if ($node.Tag -like "View.*") # Check if the item is a View
		{
			# Make a copy of the SCSM View on the XML file.
			$newViewID = Copy-SCSMView -viewName $node.Name -parentID $result -originalViewID $node.Tag
			# Create a new Node object
			$newChildNode = New-Object System.Windows.Forms.TreeNode
			# Configure the new Node
			$newChildNode.Name = Get-SCSMStringName -ID $newViewID
			$newChildNode.Text = Get-SCSMStringName -ID $newViewID
			$newChildNode.Tag = $newViewID
			$newChildNode.ImageIndex = 0
			$newChildNode.ContextMenuStrip = $viewContextMenu
			# Add the new Node
			$newNode.Nodes.Add($newChildNode)
		} # endif
		else # If the item is not a view
		{
			# Recurse the function to close the folder and any subitems.
			Clone-Folder -nodeToClone $node -parentNode $newParentNode
		}
	} # endloop
	# Expand all the newly node.
	$newNode.ExpandAll()
	# Select the new Node.
	$ManagementPackViews.SelectedNode = $newNode
} # endfunction

<#
	This function will be used to remove a View
#>
function Remove-View()
{
	# Double check that you wish to remove the view.
	$response = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $($ManagementPackViews.SelectedNode.Name)?", 'Confirm', 'OKCancel', 'Question')
	if ($response -eq [System.Windows.Forms.DialogResult]::OK) # if the answer is OK continue
	{
		# Call 'Remove-SCSMView' function to remove the view from the XML File
		Remove-SCSMView -viewId $ManagementPackViews.SelectedNode.Tag
		# Remove the selected node from the TreeView
		$ManagementPackViews.SelectedNode.Remove()
	} # endif
} # endfunction

<#
	This function will be used to remove a Folder and its subitems
#>
function Remove-Folder()
{
	# Double check that you wish to remove the folder
	$response = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $($ManagementPackViews.SelectedNode.Name)?", 'Confirm', 'OKCancel', 'Question')
	if ($response -eq [System.Windows.Forms.DialogResult]::OK) # IF the answer is OK Continue
	{
		# Call 'Remove'SCSMFolder' which will remove the folder and all its subitems from the XML file
		Remove-SCSMFolder -folderID $ManagementPackViews.SelectedNode.Tag
		# Remove the selected node which will remove the selected folder and its subitems from the TreeView
		$ManagementPackViews.SelectedNode.Remove() 
	} # endif
} # endfunction

<#
	Create a new empty folder
#>
function New-Folder()
{
	if ((Call-EnterNewName_psf) -eq 'OK') # Ensure that you press OK on the new folder name
	{
		# Save the name from the EnterName function 
		$folderName = $EnterNewName_newName_TxtBox
		# Save the selected Node as the ParentNode
		$parentNode = $ManagementPackViews.SelectedNode
		# Call the 'New-SCSMFolder' function which will create the folder on the XML file and save the return ID.
		$newFolderID = New-SCSMFolder -folderName $folderName -ParentFolderID $parentNode.Tag
		if ($newFolderID -ne $null) # Ensure that the ID is no Empty which would indicate an issue when creating the folder
		{
			# Create a new Node object
			$newNode = New-Object System.Windows.Forms.TreeNode
			# Configure the new Node
			$newNode.Text = $folderName
			$newNode.Name = $folderName
			$newNode.Tag = $newFolderID
			$newNode.ImageIndex = 0
			$newNode.ContextMenuStrip = $folderContextMenu
			# Add the new Node to the parent node
			$ManagementPackViews.SelectedNode.Nodes.Add($newNode)
			# Expand the new Node
			$ManagementPackViews.ExpandAll()
		}
	} # endif
} # endfunction

<#
	This function will rename the selected item to the given name
#>
function Rename-Item()
{
	if ((Call-EnterNewName_psf -selectedNodeName $ManagementPackViews.SelectedNode.Text ) -eq 'OK') # Ensure that you select OK on the new name
	{
		# Save the new name onto a variable
		$newName = $EnterNewName_newName_TxtBox
		# Call the'Rename-SCSMObject' function which will rename the function on the XML File
		Rename-SCSMObject -objectID $ManagementPackViews.SelectedNode.Tag $newName
		# Rename the Node object
		$ManagementPackViews.SelectedNode.Name = $newName
		$ManagementPackViews.SelectedNode.Text = $newName
		# Call the 'Populate-Properties' function which will update the properties on the right side panel.
		Populate-Properties
	} # endif
} # endfunction

<#
	This function will gather the properties of the selected item and fill out the informaiton on the right side panel.
#>
function Populate-Properties()
{
	# Hide the toolbar from the PropertyGrid
	$propertygrid1.ToolbarVisible = $false
	#region PropertyViewClass			
	<#
		This section contains a custom class that will be used to propertly use the PropertyGrid
	#>
	$source = @"
using System;
using System.Drawing;
using System.ComponentModel;
using System.Windows.Forms;
using System.Globalization;

namespace propertyGridOjects
{
	public class selectedSCSMView{
		string _viewID = string.Empty;		
		string _viewName = string.Empty;
		string _folderID = string.Empty;
		string _folderName = string.Empty;

		public selectedSCSMView(string objID, string objName, string parentID, string parentName)
		{
			this.ViewID = objID;
			this.ViewName = objName;
			this.FolderID = parentID;
			this.FolderName = parentName;
		}

		[CategoryAttribute("View Details")]
		public string ViewID
		{
			get {return _viewID;}
			set { _viewID = value; }
		}

		[CategoryAttribute("View Details")]
		public string ViewName
		{
			get {return _viewName;}
			set { _viewName = value; }
		}

		[CategoryAttribute("Folder Details")]
		public string FolderID
		{
			get {return _folderID;}
			set { _folderID = value; }
		}

		[CategoryAttribute("Folder Details")]
		public string FolderName
		{
			get {return _folderName;}
			set { _folderName = value; }
		}
	}

	public class selectedSCSMFolder{
		string _folderID = string.Empty;
		string _folderName = string.Empty;
		string _parentID = string.Empty;
		string _parentName = string.Empty;

		public selectedSCSMFolder(string objID, string objName, string parentID, string parentName)
		{
			this.FolderID = objID;
			this.FolderName = objName;
			this.ParentID = parentID;
			this.ParentName = parentName;
		}

		[CategoryAttribute("Folder Details")]
		public string FolderID
		{
			get {return _folderID;}
			set { _folderID = value; }
		}

		[CategoryAttribute("Folder Details")]
		public string FolderName
		{
			get {return _folderName;}
			set { _folderName = value; }
		}

		[CategoryAttribute("Parent Folder Details")]
		public string ParentID
		{
			get {return _parentID;}
			set { _parentID = value; }
		}

		[CategoryAttribute("Parent Folder Details")]
		public string ParentName
		{
			get {return _parentName;}
			set { _parentName = value; }
		}
	}
}
"@
	#endregion	
	# Add the new class type to memory
	Add-Type -ReferencedAssemblies ("C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Windows.Forms\v4.0_4.0.0.0__b77a5c561934e089\System.Windows.Forms.dll") -Language CSharp -TypeDefinition $source
	# Save the Selected Node ID
	$selectedNodeID = $ManagementPackViews.SelectedNode.Tag
	# SAve the Selected Node Name
	$selectedObjName = $ManagementPackViews.SelectedNode.Text
	if ($selectedNodeID.ToString().Contains("View.")) # Check if the selected node is a view
	{
		# Get the ID of the parent of the View.
		$selectedObjFolderID = Get-SCSMViewFolder -ID $selectedNodeID
		# Get the name of the parent of the View.
		$selectedObjFolder = Get-SCSMStringName $selectedObjFolderID
		# Create an propertyGrid  Object with the given information
		$selectedObjPropertyObj = New-Object propertyGridOjects.selectedSCSMView -ArgumentList @($selectedNodeID, $selectedObjName, $selectedObjFolderId, $selectedObjFolder)
	} # endif
	else # If the selected node is not a view
	{
		# Get the ID of the parent of the Folder. 
		$selectedObjFolderId = Get-SCSMFolderParent -ID $selectedNodeID
		# Get the name of the parent of the Folder.
		$selectedObjFolder = Get-SCSMStringName $selectedObjFolderID
		if ($selectedObjFolder -eq $null) # Check if the SelectedObjFolder is null
		{
			# If the variable is null then we set it to Root folder.
			$selectedObjFolder = "Root folder"
		} # endif
		# Create an propertyGrid  Object with the given information
		$selectedObjPropertyObj = New-Object propertyGridOjects.selectedSCSMFolder -ArgumentList @($selectedNodeID, $selectedObjName, $selectedObjFolderId, $selectedObjFolder)
	} # endelse
	# Add the object to the PropertyGrid
	$propertygrid1.SelectedObject = $selectedObjPropertyObj
} # endfunction

<#
	This function will be used to create a folder from a precreated template folder,
	naming for the folder and its subitems will follow the same pattern.
#>
function Create-FolderFromTemplate()
{
	if ((Call-EnterNewName_psf $ManagementPackViews.SelectedNode.Name) -eq 'OK') # Ensure that you select OK on the EnterNewName form
	{
		# Save the selectedNode object to variable
		$parentNode = $ManagementPackViews.SelectedNode
		# Get the template folder object, keep in mind that the folder and its sub items will require to have the 'TemplateFolder' in the name.
		$templateNode = $ManagementPackViews.Nodes.Find('TemplateFolder', $true)
		if ($templateNode -ne $null) # Checks if the template folder is found.
		{
			# Clone the Template folder to the given location. (The selected node.)
			Clone-Folder -nodeToClone $templateNode -parentNode $parentNode
			# The new folder will be selected, and we want to save that object to a variable.
			$newNodeObject = $ManagementPackViews.SelectedNode
			# We get the new name of the folder structure from the EnterNewName.textbox
			$newName = $EnterNewName_newName_TxtBox
			# Call the 'Rename-SCSMObject' function to rename the folder in the XML file
			Rename-SCSMObject -objectID $newNodeObject.Tag -newName $newName
			# Rename the Nodes Name and Text to the new name
			$newNodeObject.Name = $newName
			$newNodeObject.Text = $newName
			# Reload the properties to reflect the new name
			Populate-Properties
			# Get the child nodes of the folder
			$childNodes = $newNodeObject.Nodes
			foreach ($child in $childNodes) # Loop through the child nodes of the new folder
			{
				# Create the new name by replacing the 'TemplateFolder' part of the name to the given name, and save it to a temporary variable
				$tempNodeName = $child.Name.Replace("TemplateFolder", $newNodeObject.Name)
				# Call 'Rename-SCSMObject' to rename the item to the new given name
				Rename-SCSMObject -objectID $child.Tag -newName $tempNodeName
				# Rename the Nodes name and text to the new name
				$child.Name = $tempNodeName
				$child.Text = $tempNodeName
			} # endloop
		} # endif
		else # If the template folder is not found, throws an error message.
		{
			[System.Windows.Forms.MessageBox]::Show('Format Folder not found!', 'Error creating folder', 'OK', 'Error')
		} # endelse
	} # endif
} # endfunction

<#
	Load event
#>
$SCSM_ViewManager_Load = {
} # endevent

<#
	Click Event to "Load Management Pack"
#>
$loadManagementPackToolStripMenuItem_Click = {
	if ($ManagementPackXml -eq $null)
	{
		# Create a new OpenFileDialog object
		$dialog = New-Object System.Windows.Forms.OpenFileDialog
		# Configure the dialog object
		$dialog.DefaultExt = '.xml' # .XML as the default extension
		$dialog.Filter = 'ManagementPacks|*.xml|All Files|*.*' # Configure the filter drop down
		$dialog.FilterIndex = 0 # Mark the default filter
		$dialog.InitialDirectory = $HOME # Set the default directory
		$dialog.Multiselect = $false # Disable the ability to select multiple files
		$dialog.RestoreDirectory = $true # Restore the Directory on every load
		$dialog.Title = "Select the Management Pack to Load" # Title of the window
		$dialog.ValidateNames = $true # Validate that the names are correct ( I.E. Does not contain illegal characters )
		# Show the diaglog
		if (($dialog.ShowDialog()) -eq 'OK') # Check if the user pressed OK
		{
			# Save the value to the global variable
			Set-Variable -Name ManagementPackPath -Value $dialog.FileName -Scope Global
			
			if ($managementPackPath -like "*.xml") # Ensure that the file is an .xml file
			{
				# Get the content of the XML file and save it to the global variable
				Set-Variable -Name ManagementPackXml -Value $([xml](Get-Content -Path $ManagementPackPath -Encoding UTF8)) -Scope Global
				# Update the status bar
				$statusbar1.Text = "ManagementPack :: Loaded"
				# Call the 'Load-Treeview' function
				Load-TreeView
			} # endif
			else # if the file is not an xml file send an error.
			{
				# Set the global variable to null
				Set-Variable -Name ManagementPackPath -Value $null -Scope Global
				# Send error Message
				[System.Windows.Forms.MessageBox]::Show('Selected file is the wrong format!', 'Failed to load Management Pack', 'OK', 'Error')
				# Update Status bar
				$statusbar1.Text = "ManagementPack :: FailedToLoad"
			} # endelse
		} # endif
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("You have already loaded a management pack!`nUnload it before loading a new one.", 'Failed to load Management Pack', 'OK', 'Error')
	}
} # endevent

<#
	Click Event on Unload Management Pack
#>
$unloadManagementPackToolStripMenuItem_Click = {
	# Set global variables to null
	Set-Variable -Name ManagementPackPath -Value $null -Scope Global
	Set-Variable -Name ManagementPackXml -Value $null -Scope Global
	# Clear all of the nodes of the TreeView
	$ManagementPackViews.Nodes.Clear()
	$ManagementPackViews.Refresh()
	# Set the properties to null
	$propertygrid1.SelectedObjects = $null
	# Update status bar
	$statusbar1.Text = "ManagementPack :: Unloaded"
} # endevent

<#
	X Close window
#>
$exitToolStripMenuItem_Click={
	# Close the Window
	$SCSM_ViewManager.Close()
}

<#
	AfterSelect event on the TreeView nodes
#>
$ManagementPackViews_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	# Get the Selected node
	$selectedNode = $ManagementPackViews.SelectedNode
	if ($selectedNode.Nodes.Count -eq 0) # If the selected node is not eq 0 
	{
		# Call 'Get-SCSMSubfolders' function to load any subfolders of the selected node
		Get-SCSMSubfolders -id $selectedNode.Tag -parentNode $selectedNode
		# Call 'Get-SCSMSViews' function to load any Views of the selected node
		Get-SCSMViews -id $selectedNode.Tag -parentNode $selectedNode
		# Expand the node
		$selectedNode.Expand()
		if ($selectedNode.Tag -like "View.*") # Check if the selected node is a View 
		{
			# Set the image index to 2 to identify the object as a view
			$selectedNode.ImageIndex = 2
			$selectedNode.SelectedImageIndex = $selectedNode.ImageIndex
		} # endif
		else # If the selected node is not a view
		{
			# Set the image index to 1 to identify the object as an open folder
			$selectedNode.ImageIndex = 1
			$selectedNode.SelectedImageIndex = $selectedNode.ImageIndex
		} # endelse
	} # endif
	# Call 'Populate-Properties' to refresh the properties.
	Populate-Properties
} # endevent

<#
	Click Event on Node
#>
$ManagementPackViews_NodeMouseClick=[System.Windows.Forms.TreeNodeMouseClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeNodeMouseClickEventArgs]
	# Select the node where you clicked.
	$ManagementPackViews.SelectedNode = $_.Node
} # endevent

<#
	Click Event on Copy View menuToolStrip
#>
$copyViewToolStripMenuItem_Click = {
	Copy-ViewAction
}

<#
	Click Event on Copy Main View menuToolStrip
#>
$copyViewMainToolStripMenuItem_Click={
	Copy-ViewAction
}

<#
	Drag event on Node 
#>
$ManagementPackViews_ItemDrag = [System.Windows.Forms.ItemDragEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemDragEventArgs]
	$ManagementPackViews.DoDragDrop($_.Item, [System.Windows.Forms.DragDropEffects]::Move)
}

<#
	DragDrop event 
#>
$ManagementPackViews_DragDrop=[System.Windows.Forms.DragEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DragEventArgs]
	if ($_.Data.GetDataPresent("System.Windows.Forms.TreeNode", $false)) # ensure that the object being dragged is a TreeNode
	{
		# Get the node on the drop position
		$position = $ManagementPackViews.PointToClient((New-Object System.Drawing.Point($_.X, $_.Y)))
		$destinationNode = $ManagementPackViews.GetNodeAt($position)
		# Create a Node from the Parameter
		$newNode = $_.Data.GetData("System.Windows.Forms.TreeNode")
		<#
			Check the following:
				DestinationNode is not a View
				DestinationNode is not the same as the current folder 
				DestinationNode is not a subfolder of the parent node
		#>
		if (($destinationNode.Tag -notlike "View.*") -and ($destinationNode.Tag -ne $newNode.Tag) -and ($newNode.Nodes -notcontains $destinationNode))
		{
			if ($newNode.Tag -like "View.*") # Checks if the node being moved is a view
			{
 				if (Move-SCSMView -viewID $newNode.Tag -newParentID $destinationNode.Tag) # Performs a move by calling 'Move-SCSMView' and check the return 
				{
					# If the move is succesful then it will create the new node on the TreeView, expand the tree, and remove the old Node.
					$destinationNode.Nodes.Add($newNode.Clone())
					$destinationNode.ExpandAll()
					$newNode.Remove()
				} # endif
			} # endif 
			elseif ($newNode.Tag -like "Folder.*") # IF the node being moved is a folder
			{
				if (Move-SCSMFolder -folderID $newNode.Tag -newParentID $destinationNode.Tag) # Performs a move by calling 'Move-SCSMFolder' and check the return
				{
					# If the move is successful then it will create the new node on the TreeView, expand the tree, and remove the old Node.
					$destinationNode.Nodes.Add($newNode.Clone())
					$destinationNode.ExpandAll()
					$newNode.Remove()
				} # endif
			} # endelseif
		} # endif
	} # endif
} # endevent

<#
	DragOver Event
#>
$ManagementPackViews_DragOver=[System.Windows.Forms.DragEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DragEventArgs]
	# Get the Node in the mouse position
	$position = $ManagementPackViews.PointToClient((New-Object System.Drawing.Point($_.X, $_.Y)))
	$destinationNode = $ManagementPackViews.GetNodeAt($position)
	<#
		Check the following:
			DestinationNode is not a View
			DestinationNode is not the same as the current folder 
			DestinationNode is not a subfolder of the parent node
	#>
	if (($destinationNode.Tag -notlike "View.*") -and ($destinationNode.Tag -ne $newNode.Tag) -and ($newNode.Nodes -notcontains $destinationNode))
	{
		# Show the allowed effect
		$_.Effect = $_.AllowedEffect
		# Select the node you are hovering above
		$DragPoint = $ManagementPackViews.PointToClient((New-Object System.Drawing.Point($_.X, $_.Y)))
		$ManagementPackViews.SelectedNode = $ManagementPackViews.GetNodeAt($DragPoint)
	}
}

<#
	Click Event on New Folder menuToolStrip
#>
$newFolderToolStripMenuItem_Click = {
	Clone-Folder $ManagementPackViews.SelectedNode $ManagementPackViews.SelectedNode.Parent
}

<#
	Click Event on Clone Folder mainToolStrip
#>
$cloneFolderMainToolStripMenuItem_Click = {
	Clone-Folder $ManagementPackViews.SelectedNode $ManagementPackViews.SelectedNode.Parent
}

<#
	Click Event on Delete Folder mainToolStrip
#>
$deleteViewMainToolStripMenuItem_Click = {
	Remove-View
}

<#
	Click Event on Delete Folder menuToolStrip
#>
$deleteFolderToolStripMenuItem_Click={
	Remove-Folder
}

<#
	Click Event on Delete View menuToolStrip
#>
$deleteViewToolStripMenuItem_Click={
	Remove-View 
}

<#
	Click Event on Delete View mainToolStrip
#>
$deleteFolderMainToolStripMenuItem1_Click={
	Remove-Folder
}

<#
	Click Event on Rename View mainToolStrip
#>
$renameViewMainToolStripMenuItem_Click={
	Rename-Item 
}

<#
	Click Event on Rename View menuToolStrip
#>
$renameViewToolStripMenuItem_Click={
	Rename-Item
}

<#
	Click Event on Rename Folder menuToolStrip
#>
$renameFolderToolStripMenuItem_Click={
	Rename-Item
}

<#
	DoubleClick Event on Node
#>
$ManagementPackViews_NodeMouseDoubleClick=[System.Windows.Forms.TreeNodeMouseClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeNodeMouseClickEventArgs]
	Rename-Item
}

<#
	Click Event on New Folder mainToolStrip
#>
$newFolderMainToolStrip_Click={
	New-Folder
}

<#
	Click Event on New Folder menuToolStrip
#>
$newFolderToolStrip_Click={
	New-Folder
}

<#
	Click Event on New Folder from template mainToolStrip
#>
$newFolderFromTemplateToolStripMenuItem_Click={
	Create-FolderFromTemplate
}

<#
	Event AfterExpand 
#>
$ManagementPackViews_AfterExpand=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	# Change the image index if the folder is expanded
	$_.Node.ImageIndex = 1
	$_.Node.SelectedImageIndex = $_.Node.ImageIndex
}

<#
	Event AfterCollapse
#>
$ManagementPackViews_AfterCollapse=[System.Windows.Forms.TreeViewEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	# Change the image index if the folder is collapsed
	$_.Node.ImageIndex = 0
	$_.Node.SelectedImageIndex = $_.Node.ImageIndex
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>